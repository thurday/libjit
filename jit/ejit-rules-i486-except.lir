
JIT_OP_THROW:
    [reg] -> {
        if(func->builder->setjmp_value != 0)
        {
            /* We have a "setjmp" block in the current function,
               so we must record the location of the throw first */
            if(func->builder->position_independent)
            {
                x86_call_imm(inst, 0);
                x86_pop_membase(inst, X86_EBP,
                        func->builder->setjmp_value->vreg->frame->frame_offset
                        + jit_jmp_catch_pc_offset);
            }
            else
            {

                int pc = (int) inst;
                x86_mov_membase_imm(inst, X86_EBP,
                            func->builder->setjmp_value->vreg->frame->frame_offset
                            + jit_jmp_catch_pc_offset, pc, 4);
            }
        }
        x86_push_reg(inst, $1);
        x86_call_code(inst, (void *)jit_exception_throw);
    }
    [local] -> {
        if(func->builder->setjmp_value != 0)
        {
            /* We have a "setjmp" block in the current function,
               so we must record the location of the throw first */
            if(func->builder->position_independent)
            {
                x86_call_imm(inst, 0);
                x86_pop_membase(inst, X86_EBP,
                            func->builder->setjmp_value->vreg->frame->frame_offset
                            + jit_jmp_catch_pc_offset);
            }
            else
            {
                int pc = (int) inst;
                x86_mov_membase_imm(inst, X86_EBP,
                            func->builder->setjmp_value->vreg->frame->frame_offset
                            + jit_jmp_catch_pc_offset, pc, 4);
            }
        }
        x86_push_membase(inst, X86_EBP, $1);
        x86_call_code(inst, (void *)jit_exception_throw);
    }

JIT_OP_RETHROW:
    [] -> { /* Not used in native code back ends */ }

JIT_OP_LOAD_PC:
    [=reg] -> {
        int pc = (int) inst;
        x86_mov_reg_imm(inst, $1, pc);
    }
    [=local] -> {
        int pc = (int) inst;
        x86_mov_membase_imm(inst, X86_EBP, $1, pc, 4);
    }

JIT_OP_LOAD_EXCEPTION_PC:
    [] -> { /* Not used in native code back ends */ }

JIT_OP_ENTER_FINALLY:
    [] -> { /* Nothing to do here: return address on the stack */ }

JIT_OP_LEAVE_FINALLY:
    [] -> {
        /* The "finally" return address is on the stack */
        x86_ret(inst);
    }

JIT_OP_CALL_FINALLY:
    [] -> {
        jit_block_t block;

        block = jit_block_from_label(func, (jit_label_t)(insn->dest));
        if(!block)
        {
            return;
        }

        if(block->address)
        {
            x86_call_code(inst, block->address);
        }
        else
        {
            x86_call_imm(inst, block->fixup_list);
            block->fixup_list = (void *)(inst - 4);
        }
    }

JIT_OP_ENTER_FILTER:
    [] -> {
        /* TODO */
    }

JIT_OP_LEAVE_FILTER:
    [] -> {
        /* TODO */
    }

JIT_OP_CALL_FILTER:
    [] -> {
        /* TODO */
    }

JIT_OP_CALL_FILTER_RETURN:
    [] -> {
        /* TODO */
    }

JIT_OP_ADDRESS_OF_LABEL:
    [=reg] -> {
        block = jit_block_from_label(func, (jit_label_t)(insn->value1));
        if(func->builder->position_independent)
        {
            /* TODO */
        }
        else
        {
            if(block->address)
            {
                x86_mov_reg_imm(inst, $1, block->address);
            }
            else
            {
                /* Output a placeholder and record on the block's fixup list */
                x86_mov_reg_imm(inst, $1, (int)(block->fixup_absolute_list));
                block->fixup_absolute_list = (void *)(inst - 4);
            }
        }
    }
    [=local] -> {
        block = jit_block_from_label(func, (jit_label_t)(insn->value1));
        if(func->builder->position_independent)
        {
            /* TODO */
        }
        else
        {
            if(block->address)
            {
                x86_mov_membase_imm(inst, X86_EBP, $1, (int)(block->address), 4);
            }
            else
            {
                /* Output a placeholder and record on the block's fixup list */
                x86_mov_membase_imm(inst, X86_EBP, $1, (int)(block->fixup_absolute_list), 4);
                block->fixup_absolute_list = (void *)(inst - 4);
            }
        }
    }
