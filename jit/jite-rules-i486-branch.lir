
JIT_OP_BR:
    [] -> {        
        inst = output_branch(func, inst, 0xEB /* jmp */, insn);
    }

JIT_OP_BR_IFALSE, JIT_OP_BR_ITRUE:
    [imm] -> {
        find_one_gp_reg(inst);
        x86_mov_reg_imm(inst, gpreg1, $1);
        x86_alu_reg_reg(inst, X86_OR, gpreg1, gpreg1);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [local] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1, 0);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [reg] -> {
        x86_alu_reg_reg(inst, X86_OR, $1, $1);
        inst = output_branch(func, inst, machine_code1, insn);
    }

JIT_OP_BR_IEQ, JIT_OP_BR_INE:
    [imm, imm] -> {
        find_one_gp_reg(inst);
        x86_mov_reg_imm(inst, gpreg1, $1);
        x86_alu_reg_imm(inst, X86_CMP, gpreg1, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [imm, local] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, $1);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [imm, reg] -> {
        if($1 != 0)
        {
            x86_alu_reg_imm(inst, X86_CMP, $2, $1);
            inst = output_branch(func, inst, machine_code1, insn);
        }
        else
        {
            x86_alu_reg_reg(inst, X86_OR, $2, $2);
            inst = output_branch(func, inst, machine_code1, insn);
        }
    }
    [local, imm] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [local, local] -> {
        // find_one_gp_reg(inst);
	inst = jite_allocate_local_register(inst, func, value1->vreg, value1->vreg, value2->vreg, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &gpreg1);
        x86_mov_reg_membase(inst, gpreg1, X86_EBP, $1, 4);
        x86_alu_reg_membase(inst, X86_CMP, gpreg1, X86_EBP, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [local, reg] -> {
        x86_alu_membase_reg(inst, X86_CMP, X86_EBP, $1, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [reg, imm] -> {
        if($2 != 0)
        {
            x86_alu_reg_imm(inst, X86_CMP, $1, $2);
            inst = output_branch(func, inst, machine_code1, insn);
        }
        else
        {
            x86_alu_reg_reg(inst, X86_OR, $1, $1);
            inst = output_branch(func, inst, machine_code1, insn);
        }
    }
    [reg, local] -> {
        x86_alu_reg_membase(inst, X86_CMP, $1, X86_EBP, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [reg, reg] -> {
        x86_alu_reg_reg(inst, X86_CMP, $1, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }

JIT_OP_BR_ILT, JIT_OP_BR_ILT_UN, JIT_OP_BR_ILE, JIT_OP_BR_ILE_UN, JIT_OP_BR_IGT, JIT_OP_BR_IGT_UN, JIT_OP_BR_IGE, JIT_OP_BR_IGE_UN:
    [imm, imm] -> {
        find_one_gp_reg(inst);
        x86_mov_reg_imm(inst, gpreg1, $1);
        x86_alu_reg_imm(inst, X86_CMP, gpreg1, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [imm, local] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, $1);
        inst = output_branch(func, inst, machine_code2, insn);
    }
    [imm, reg] -> {
        x86_alu_reg_imm(inst, X86_CMP, $2, $1);
        inst = output_branch(func, inst, machine_code2, insn);
    }
    [local, imm] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [local, local] -> {
        // find_one_gp_reg(inst);
        // inst = jite_allocate_local_register(inst, func, insn->value1, insn->value1, insn->value2, LOCAL_ALLOCATE_FOR_TEMP, 0, 0, 0);
	inst = jite_allocate_local_register(inst, func, value1->vreg, value1->vreg, value2->vreg, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &gpreg1);

        x86_mov_reg_membase(inst, gpreg1, X86_EBP, $1, 4);
        x86_alu_reg_membase(inst, X86_CMP, gpreg1, X86_EBP, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [local, reg] -> {
        x86_alu_membase_reg(inst, X86_CMP, X86_EBP, $1, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [reg, imm] -> {
        x86_alu_reg_imm(inst, X86_CMP, $1, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [reg, local] -> {
        x86_alu_reg_membase(inst, X86_CMP, $1, X86_EBP, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [reg, reg] -> {
        x86_alu_reg_reg(inst, X86_CMP, $1, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }

/*
 * Comparison opcodes.
 */

JIT_OP_IEQ, JIT_OP_INE, JIT_OP_ILT, JIT_OP_ILT_UN, JIT_OP_ILE, JIT_OP_ILE_UN, JIT_OP_IGT, JIT_OP_IGT_UN, JIT_OP_IGE, JIT_OP_IGE_UN:
    [=reg, imm, imm] -> {
        x86_mov_reg_imm(inst, $1, $2);
        x86_alu_reg_imm(inst, X86_CMP, $1, $3);
        setcc_reg(inst, $1, machine_code1, machine_code3);
    }
    [=reg, imm, local] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, $2);
        setcc_reg(inst, $1, machine_code2, machine_code3);
    }
    [=reg, imm, reg] -> {
        x86_alu_reg_imm(inst, X86_CMP, $3, $2);
        setcc_reg(inst, $1, machine_code2, machine_code3);
    }
    [=reg, local, imm] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, $3);
        setcc_reg(inst, $1, machine_code1, machine_code3);
    }
    [=reg, local, local] -> {
        x86_mov_reg_membase(inst, $1, X86_EBP, $2, 4);
        x86_alu_reg_membase(inst, X86_CMP, $1, X86_EBP, $3);
        setcc_reg(inst, $1, machine_code1, machine_code3);
    }
    [=reg, local, reg] -> {
        x86_alu_membase_reg(inst, X86_CMP, X86_EBP, $2, $3);
        setcc_reg(inst, $1, machine_code1, machine_code3);
    }
    [=reg, reg, imm] -> {
        x86_alu_reg_imm(inst, X86_CMP, $2, $3);
        setcc_reg(inst, $1, machine_code1, machine_code3);
    }
    [=reg, reg, local] -> {
        x86_alu_reg_membase(inst, X86_CMP, $2, X86_EBP, $3);
        setcc_reg(inst, $1, machine_code1, machine_code3);
    }
    [=reg, reg, reg] -> {
        x86_alu_reg_reg(inst, X86_CMP, $2, $3);
        setcc_reg(inst, $1, machine_code1, machine_code3);
    }

JIT_OP_BR_LFALSE, JIT_OP_BR_LTRUE:
    [imm] -> {
        find_one_gp_reg(inst);
        x86_mov_reg_imm(inst, gpreg1, ((jit_nint *)($1))[0]);
        x86_alu_reg_imm(inst, X86_OR, gpreg1, ((jit_nint *)($1))[1]);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [local] -> {
//      find_one_gp_reg(inst);
	inst = jite_allocate_local_register(inst, func, value1->vreg, 0, 0, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &gpreg1);
//      x86_mov_reg_membase(inst, gpreg1, X86_EBP, $1 + 4, 4);
        x86_alu_reg_membase(inst, X86_OR, gpreg1, X86_EBP, $1);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [lreg] -> {
        x86_alu_reg_reg(inst, X86_OR, $1, jite_register_pair($1));
        inst = output_branch(func, inst, machine_code1, insn);
    }

JIT_OP_BR_LEQ:
    [imm, imm] -> {
        jit_long value1 = *((jit_long *)($1));
        jit_long value2 = *((jit_long *)($2));
        if(value1 == value2)
        {
            inst = output_branch(func, inst, 0xEB /* jmp */, insn);
        }
    }
    [imm, local] -> {
        unsigned char *patch1, *patch2;
        jit_uint value1 = ((jit_nint *)($1))[0];
        jit_int value2 = ((jit_nint *)($1))[1];
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, value1);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 0);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2 + 4, value2);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
        x86_patch(patch2, inst);
    }
    [imm, lreg] -> {
        unsigned char *patch1, *patch2;
        jit_uint value1 = ((jit_nint *)($1))[0];
        jit_int value2 = ((jit_nint *)($1))[1];
        x86_alu_reg_imm(inst, X86_CMP, $2, value1);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 0);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);
        x86_alu_reg_imm(inst, X86_CMP, jite_register_pair($2), value2);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
        x86_patch(patch2, inst);
    }
    [local, imm] -> {
        unsigned char *patch1, *patch2;
        jit_int value1 = ((jit_nint *)($2))[0];
        jit_int value2 = ((jit_nint *)($2))[1];
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1, value1);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 0);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1 + 4, value2);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
        x86_patch(patch2, inst);
    }
    [lreg, imm] -> {
        unsigned char *patch1, *patch2;
        jit_int value1 = ((jit_nint *)($2))[0];
        jit_int value2 = ((jit_nint *)($2))[1];
        x86_alu_reg_imm(inst, X86_CMP, $1, value1);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 0);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);
        x86_alu_reg_imm(inst, X86_CMP, jite_register_pair($1), value2);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
        x86_patch(patch2, inst);
    }
    [local, local] -> {
        if($1 != $2)
        {
            unsigned char *patch1, *patch2;
	    inst = jite_allocate_local_register(inst, func, value1->vreg, 0, 0, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &gpreg1);
//          find_one_gp_reg(inst);
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
            x86_alu_membase_reg(inst, X86_CMP, X86_EBP, $1, gpreg1);
            patch1 = inst;
            x86_branch8(inst, X86_CC_EQ, 0, 0);
            patch2 = inst;
            x86_jump8(inst, 0);
            x86_patch(patch1, inst);
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2 + 4, 4);
            x86_alu_membase_reg(inst, X86_CMP, X86_EBP, $1 + 4, gpreg1);
            inst = output_branch(func, inst, 0x74 /* eq */, insn);
            x86_patch(patch2, inst);
        }
        else
        {    
            inst = output_branch(func, inst, 0xEB /* jmp */, insn);
        }
    }
    [lreg, lreg] -> {
        if($1 != $2)
        {
            unsigned char *patch1, *patch2;
            x86_alu_reg_reg(inst, X86_CMP, $1, $2);
            patch1 = inst;
            x86_branch8(inst, X86_CC_EQ, 0, 0);
            patch2 = inst;
            x86_jump8(inst, 0);
            x86_patch(patch1, inst);
            x86_alu_reg_reg(inst, X86_CMP, jite_register_pair($1), jite_register_pair($2));
            inst = output_branch(func, inst, 0x74 /* eq */, insn);
            x86_patch(patch2, inst);
        }
        else
        {
            inst = output_branch(func, inst, 0xEB /* jmp */, insn);
        }
    }

JIT_OP_BR_LNE:
    [imm, imm] -> {
        jit_long value1 = *((jit_long *)($1));
        jit_long value2 = *((jit_long *)($2));
        if(value1 != value2)
        {    
            inst = output_branch(func, inst, 0xEB /* jmp */, insn);
        }
    }
    [imm, local] -> {
        jit_nint value1 = ((jit_nint *)($1))[0];
        jit_nint value2 = ((jit_nint *)($1))[1];
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, value1);
        inst = output_branch(func, inst, 0x75 /* neq */, insn);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2 + 4, value2);
        inst = output_branch(func, inst, 0x75 /* neq */, insn);
    }
    [imm, lreg] -> {
        jit_nint value1 = ((jit_nint *)($1))[0];
        jit_nint value2 = ((jit_nint *)($1))[1];
        x86_alu_reg_imm(inst, X86_CMP, $2, value1);
        inst = output_branch(func, inst, 0x75 /* neq */, insn);
        if(insn->value2->vreg->in_reg) x86_alu_reg_imm(inst, X86_CMP, jite_register_pair($2), value2);
	else x86_alu_membase_imm(inst, X86_CMP, X86_EBP, insn->value2->vreg->frame->frame_offset, value2);
        inst = output_branch(func, inst, 0x75 /* neq */, insn);
    }
    [local, imm] -> {
        jit_nint value1 = ((jit_nint *)($2))[0];
        jit_nint value2 = ((jit_nint *)($2))[1];
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1, value1);
        inst = output_branch(func, inst, 0x75 /* neq */, insn);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1 + 4, value2);
        inst = output_branch(func, inst, 0x75 /* neq */, insn);
    }
    [lreg, imm] -> {
        jit_nint value1 = ((jit_nint *)($2))[0];
        jit_nint value2 = ((jit_nint *)($2))[1];
        x86_alu_reg_imm(inst, X86_CMP, $1, value1);
        inst = output_branch(func, inst, 0x75 /* neq */, insn);
	if(insn->value1->vreg->in_reg) x86_alu_reg_imm(inst, X86_CMP, jite_register_pair($1), value2);
	else x86_alu_membase_imm(inst, X86_CMP, X86_EBP, insn->value1->vreg->frame->frame_offset, value2);
        inst = output_branch(func, inst, 0x75 /* neq */, insn);
    }
    [local, local] -> {
        if($1 != $2)
        {
	    inst = jite_allocate_local_register(inst, func, value2->vreg, value1->vreg, value2->vreg, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &gpreg1);
//          find_one_gp_reg(inst);
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
            x86_alu_membase_reg(inst, X86_CMP, X86_EBP, $1, gpreg1);
            inst = output_branch(func, inst, 0x75 /* neq */, insn);
	    inst = jite_allocate_local_register(inst, func, value2->vreg, value1->vreg, value2->vreg, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &gpreg1);

//          find_one_gp_reg(inst);
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2 + 4, 4);
            x86_alu_membase_reg(inst, X86_CMP, X86_EBP, $1 + 4, gpreg1);
            inst = output_branch(func, inst, 0x75 /* neq */, insn);
        }
    }
    [lreg, lreg] -> {
        if($1 != $2)
        {
	    unsigned char *patch1;
            x86_alu_reg_reg(inst, X86_CMP, $1, $2);
   	    patch1 = inst;
	    x86_branch8(inst, X86_CC_NE, 0, 0);
            x86_alu_reg_reg(inst, X86_CMP, jite_register_pair($1), jite_register_pair($2));
  	    x86_patch(patch1, inst);
            inst = output_branch(func, inst, 0x75 /* neq */, insn);
        }
    }

JIT_OP_BR_LLT, JIT_OP_BR_LLT_UN, JIT_OP_BR_LLE, JIT_OP_BR_LLE_UN, JIT_OP_BR_LGT, JIT_OP_BR_LGT_UN, JIT_OP_BR_LGE, JIT_OP_BR_LGE_UN:
    [imm, imm] -> {
        unsigned char *patch1, *patch2;

	inst = jite_allocate_local_register(inst, func, 0, 0, 0, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &gpreg1);

//      find_one_gp_reg(inst);
        x86_mov_reg_imm(inst, gpreg1, ((jit_nint *)($1))[1]);
        x86_alu_reg_imm(inst, X86_CMP, gpreg1, ((jit_nint *)($2))[1]);
        inst = output_branch(func, inst, machine_code1, insn);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 1);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);

	inst = jite_allocate_local_register(inst, func, 0, 0, 0, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &gpreg1);

//      find_one_gp_reg(inst);
        x86_mov_reg_imm(inst, gpreg1, ((jit_nint *)($1))[0]);
        x86_alu_reg_imm(inst, X86_CMP, gpreg1, ((jit_nint *)($2))[0]);
        inst = output_branch(func, inst, machine_code2, insn);
        x86_patch(patch2, inst);
    }
    [imm, local] -> {
        unsigned char *patch1, *patch2;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2 + 4, ((jit_nint *)($1))[1]);
        inst = output_branch(func, inst, machine_code3, insn);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 1);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, ((jit_nint *)($1))[0]);
        inst = output_branch(func, inst, machine_code4, insn);
        x86_patch(patch2, inst);
    }
    [imm, lreg] -> {
        unsigned char *patch1, *patch2;
        x86_alu_reg_imm(inst, X86_CMP, jite_register_pair($2), ((jit_nint *)($1))[1]);
        inst = output_branch(func, inst, machine_code3, insn);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 1);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);
        if(value2->vreg->in_reg) x86_alu_reg_imm(inst, X86_CMP, $2, ((jit_nint *)($1))[0]);
	else x86_alu_membase_imm(inst, X86_CMP, X86_EBP, value2->vreg->frame->frame_offset, ((jit_nint *)($1))[0]);
        inst = output_branch(func, inst, machine_code4, insn);
        x86_patch(patch2, inst);
    }
    [local, imm] -> {
        unsigned char *patch1, *patch2;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1 + 4, ((jit_nint *)($2))[1]);
        inst = output_branch(func, inst, machine_code1, insn);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 1);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1, ((jit_nint *)($2))[0]);
        inst = output_branch(func, inst, machine_code2, insn);
        x86_patch(patch2, inst);
    }
    [lreg, imm] -> {
        unsigned char *patch1, *patch2;
        x86_alu_reg_imm(inst, X86_CMP, jite_register_pair($1), ((jit_nint *)($2))[1]);
        inst = output_branch(func, inst, machine_code1, insn);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 1);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);
        if(value1->vreg->in_reg) x86_alu_reg_imm(inst, X86_CMP, $1, ((jit_nint *)($2))[0]);
	else x86_alu_membase_imm(inst, X86_CMP, X86_EBP, value1->vreg->frame->frame_offset, ((jit_nint *)($2))[0]);
        inst = output_branch(func, inst, machine_code2, insn);
        x86_patch(patch2, inst);
    }
    [local, local] -> {
        unsigned char *patch1, *patch2;

	find_one_xmm_reg_cond2_vreg(inst, value1->vreg, value2->vreg);

//	inst = jite_allocate_local_register(inst, func, insn->value1->vreg, insn->value1->vreg, insn->value2->vreg, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &gpreg1);

//      find_one_gp_reg(inst);
        x86_mov_reg_membase(inst, gpreg1, X86_EBP, $1 + 4, 4);
        x86_alu_reg_membase(inst, X86_CMP, gpreg1, X86_EBP, $2 + 4);
        inst = output_branch(func, inst, machine_code1, insn);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 1);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);

	find_one_xmm_reg_cond2_vreg(inst, value1->vreg, value2->vreg);

//	inst = jite_allocate_local_register(inst, func, value1->vreg, value1->vreg, value2->vreg, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &gpreg1);

//      find_one_gp_reg(inst);
        x86_mov_reg_membase(inst, gpreg1, X86_EBP, $1, 4);
        x86_alu_reg_membase(inst, X86_CMP, gpreg1, X86_EBP, $2);
        inst = output_branch(func, inst, machine_code2, insn);
        x86_patch(patch2, inst);
    }
    [lreg, lreg] -> {
        /* TODO: Do something with this case if $1 or $2 are allocated locally. If they are allocated temporary
	   then content of these registers will be destroy after call to restore_temporary_frame. At the moment
	   we simply do not allocate local registers for lreg  */

        unsigned char *patch1, *patch2;
        x86_alu_reg_reg(inst, X86_CMP, jite_register_pair($1), jite_register_pair($2));
        inst = output_branch(func, inst, machine_code1, insn);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 1);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);
        x86_alu_reg_reg(inst, X86_CMP, $1, $2);
        inst = output_branch(func, inst, machine_code2, insn);
        x86_patch(patch2, inst);
    }

JIT_OP_DEQ, JIT_OP_DEQ_INV, JIT_OP_DNE, JIT_OP_DNE_INV, JIT_OP_DLT, JIT_OP_DLT_INV, JIT_OP_DLE, JIT_OP_DLE_INV, JIT_OP_DGT, JIT_OP_DGT_INV, JIT_OP_DGE, JIT_OP_DGE_INV, JIT_OP_FEQ, JIT_OP_FEQ_INV, JIT_OP_FNE, JIT_OP_FNE_INV, JIT_OP_FLT, JIT_OP_FLT_INV, JIT_OP_FLE, JIT_OP_FLE_INV, JIT_OP_FGT, JIT_OP_FGT_INV, JIT_OP_FGE, JIT_OP_FGE_INV:
    [=reg, imm, imm] -> {
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_imm(inst, xmmreg1, $2, sourceType);
        inst = masm_mov_membase_imm(inst, X86_ESP, -32, $3, sourceType);
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), xmmreg1, X86_ESP, -32);
        setcc_reg(inst, $1, machine_code1, 0);
    }
    [=reg, imm, local] -> {
	inst = jite_allocate_local_register(inst, func, value2->vreg, 0, 0, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &xmmreg1);
//        find_one_xmm_reg(inst);
        inst = masm_mov_reg_imm(inst, xmmreg1, $2, sourceType);
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), xmmreg1, X86_EBP, $3);
        setcc_reg(inst, $1, machine_code1, 0);
    }
    [=reg, imm, freg] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -16, $2, sourceType);
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), $3, X86_ESP, -16);
        setcc_reg(inst, $1, machine_code2, 0);
    }
    [=reg, local, imm] -> {
	inst = jite_allocate_local_register(inst, func, value1->vreg, 0, 0, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &xmmreg1);
//      find_one_xmm_reg(inst);
        inst = masm_mov_reg_membase(inst, xmmreg1, X86_EBP, $2, sourceType);
        inst = masm_mov_membase_imm(inst, X86_ESP, -32, $3, sourceType);
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), xmmreg1, X86_ESP, -32);
        setcc_reg(inst, $1, machine_code1, 0);
    }
    [=reg, local, local] -> {
	inst = jite_allocate_local_register(inst, func, value1->vreg, value1->vreg, value2->vreg, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &xmmreg1);
//      find_one_xmm_reg(inst);
        inst = masm_mov_reg_membase(inst, xmmreg1, X86_EBP, $2, sourceType);
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), xmmreg1, X86_EBP, $3);
        setcc_reg(inst, $1, machine_code1, 0);
    }
    [=reg, local, freg] -> {
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), $3, X86_EBP, $2);
        setcc_reg(inst, $1, machine_code2, 0);
    }
    [=reg, freg, imm] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -16, $3, sourceType);
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), $2, X86_ESP, -16);
        setcc_reg(inst, $1, machine_code1, 0);
    }
    [=reg, freg, local] -> {
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), $2, X86_EBP, $3);
        setcc_reg(inst, $1, machine_code1, 0);
    }
    [=reg, freg, freg] -> {
        emit_sse_instruction_reg_reg(inst, (machine_code3), (machine_code4), $2, $3);
        setcc_reg(inst, $1, machine_code1, 0);
    }

JIT_OP_BR_DEQ, JIT_OP_BR_DEQ_INV:
    [imm, imm] -> {
        jit_float64 value1 = *((jit_float64 *)($1));
        jit_float64 value2 = *((jit_float64 *)($2));
        if(value1 == value2)
        {
            inst = output_branch(func, inst, 0xEB /* jmp */, insn);
        }
    }
    [imm, local] -> {        
        unsigned char *patch1, *patch2;
        jit_int value1 = ((jit_int *)($1))[0];
        jit_int value2 = ((jit_int *)($1))[1];
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, value1);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 0);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2 + 4, value2);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
        x86_patch(patch2, inst);
    }
    [imm, freg] -> {
        x86_mov_membase_imm(inst, X86_ESP, -16, ((jit_uint *)($1))[0], 4);
        x86_mov_membase_imm(inst, X86_ESP, -12, ((jit_uint *)($1))[1], 4);
        sse2_comisd_xmreg_membase(inst, $2, X86_ESP, -16);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
    }
    [local, imm] -> {
        unsigned char *patch1, *patch2;
        jit_int value1 = ((jit_int *)($2))[0];
        jit_int value2 = ((jit_int *)($2))[1];
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1, value1);
        patch1 = inst;
        x86_branch8(inst, X86_CC_EQ, 0, 0);
        patch2 = inst;
        x86_jump8(inst, 0);
        x86_patch(patch1, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1 + 4, value2);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
        x86_patch(patch2, inst);
    }
    [local, local] -> {
        if($1 != $2)
        {
	    find_one_xmm_reg_cond2_vreg(inst, value1->vreg, value2->vreg);
//	    inst = jite_allocate_local_register(inst, func, insn->value1->vreg, insn->value1->vreg, insn->value2->vreg, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &xmmreg1);
            // find_one_xmm_reg(inst);
            sse2_movsd_xmreg_membase(inst, xmmreg1, X86_EBP, $1);
            sse2_comisd_xmreg_membase(inst, xmmreg1, X86_EBP, $2);    
            inst = output_branch(func, inst, 0x74 /* eq */, insn);
        }
        else
        {
            inst = output_branch(func, inst, 0xEB /* jmp */, insn);
        }
    }
    [local, freg] -> {
        sse2_comisd_xmreg_membase(inst, $2, X86_EBP, $1);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
    }
    [freg, imm] -> {
        x86_mov_membase_imm(inst, X86_ESP, -16, ((jit_uint *)($2))[0], 4);
        x86_mov_membase_imm(inst, X86_ESP, -12, ((jit_uint *)($2))[1], 4);
        sse2_comisd_xmreg_membase(inst, $1, X86_ESP, -16);
	inst = output_branch(func, inst, 0x74 /* eq */, insn);
    }
    [freg, local] -> {
        sse2_comisd_xmreg_membase(inst, $1, X86_EBP, $2);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
    }
    [freg, freg] -> {
        if($1 != $2)
        {
            sse2_comisd_xmreg_xmreg(inst, $1, $2);    
	    inst = output_branch(func, inst, 0x74 /* eq */, insn);
        }
        else
        {
            inst = output_branch(func, inst, 0xEB /* jmp */, insn);
        }
    }

JIT_OP_BR_DNE, JIT_OP_BR_DNE_INV:
    [imm, imm] -> {
        jit_float64 value1 = *((jit_float64 *)($1));
        jit_float64 value2 = *((jit_float64 *)($2));
        if(value1 != value2)
        {   	    
            inst = output_branch(func, inst, 0xEB /* jmp */, insn);
        }
    }
    [imm, local] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, ((jit_nint *)($1))[0]);
        inst = output_branch(func, inst, 0x75 /* neq */, insn);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2 + 4, ((jit_nint *)($1))[1]);
        inst = output_branch(func, inst, 0x75 /* neq */, insn);
    }
    [imm, freg] -> {
        x86_mov_membase_imm(inst, X86_ESP, -16, ((jit_uint *)($1))[0], 4);
        x86_mov_membase_imm(inst, X86_ESP, -12, ((jit_uint *)($1))[1], 4);
        sse2_comisd_xmreg_membase(inst, $2, X86_ESP, -16);        
        inst = output_branch(func, inst, 0x75 /* ne */, insn);
    }
    [local, imm] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1, ((jit_nint *)($2))[0]);
        inst = output_branch(func, inst, 0x75 /* neq */, insn);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1 + 4, ((jit_nint *)($2))[1]);
        inst = output_branch(func, inst, 0x75 /* neq */, insn);
    }
    [local, local] -> {
        if($1 != $2)
        {
	    find_one_xmm_reg_cond2_vreg(inst, value1->vreg, value2->vreg);

//	    inst = jite_allocate_local_register(inst, func, insn->value1->vreg, insn->value1->vreg, insn->value2->vreg, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &xmmreg1);
//          find_one_xmm_reg(inst);
            sse2_movsd_xmreg_membase(inst, xmmreg1, X86_EBP, $1);
            sse2_comisd_xmreg_membase(inst, xmmreg1, X86_EBP, $2);
            inst = output_branch(func, inst, 0x75 /* ne */, insn);
        }
    }
    [local, freg] -> {
        sse2_comisd_xmreg_membase(inst, $2, X86_EBP, $1);
        inst = output_branch(func, inst, 0x75 /* ne */, insn);
    }
    [freg, imm] -> {
        x86_mov_membase_imm(inst, X86_ESP, -16, ((jit_uint *)($2))[0], 4);
        x86_mov_membase_imm(inst, X86_ESP, -12, ((jit_uint *)($2))[1], 4);
        sse2_comisd_xmreg_membase(inst, $1, X86_ESP, -16);
        inst = output_branch(func, inst, 0x75 /* ne */, insn);
    }
    [freg, local] -> {
        sse2_comisd_xmreg_membase(inst, $1, X86_EBP, $2);
        inst = output_branch(func, inst, 0x75 /* ne */, insn);
    }
    [freg, freg] -> {
        if($1 != $2)
        {
            sse2_comisd_xmreg_xmreg(inst, $1, $2);
            inst = output_branch(func, inst, 0x75 /* ne */, insn);
        }
    }

JIT_OP_BR_DLT, JIT_OP_BR_DLT_INV, JIT_OP_BR_DLE, JIT_OP_BR_DLE_INV, JIT_OP_BR_DGT, JIT_OP_BR_DGT_INV, JIT_OP_BR_DGE, JIT_OP_BR_DGE_INV, JIT_OP_BR_FLT, JIT_OP_BR_FLT_INV, JIT_OP_BR_FLE, JIT_OP_BR_FLE_INV, JIT_OP_BR_FGT, JIT_OP_BR_FGT_INV, JIT_OP_BR_FGE, JIT_OP_BR_FGE_INV:
    [imm, imm] -> {
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_imm(inst, xmmreg1, $1, sourceType);
        inst = masm_mov_membase_imm(inst, X86_ESP, -32, $2, sourceType);
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), xmmreg1, X86_ESP, -32);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [imm, local] -> {
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_imm(inst, xmmreg1, $1, sourceType);
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), xmmreg1, X86_EBP, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [imm, freg] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -16, $1, sourceType);
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), $2, X86_ESP, -16);
        inst = output_branch(func, inst, machine_code2, insn);
    }
    [local, imm] -> {
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_membase(inst, xmmreg1, X86_EBP, $1, sourceType);
        inst = masm_mov_membase_imm(inst, X86_ESP, -32, $2, sourceType);
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), xmmreg1, X86_ESP, -32);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [local, local] -> {

	find_one_xmm_reg_cond2_vreg(inst, value1->vreg, value2->vreg);

//	inst = jite_allocate_local_register(inst, func, insn->value1->vreg, insn->value1->vreg, insn->value2->vreg, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &xmmreg1);
//        find_one_xmm_reg(inst);
        inst = masm_mov_reg_membase(inst, xmmreg1, X86_EBP, $1, sourceType);
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), xmmreg1, X86_EBP, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [local, freg] -> {
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), $2, X86_EBP, $1);
        inst = output_branch(func, inst, machine_code2, insn);
    }
    [freg, imm] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -16, $2, sourceType);
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), $1, X86_ESP, -16);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [freg, local] -> {
        emit_sse_instruction_reg_membase(inst, (machine_code3), (machine_code4), $1, X86_EBP, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }
    [freg, freg] -> {
        emit_sse_instruction_reg_reg(inst, (machine_code3), (machine_code4), $1, $2);
        inst = output_branch(func, inst, machine_code1, insn);
    }

JIT_OP_BR_FEQ, JIT_OP_BR_FEQ_INV:
    [imm, imm] -> {
        jit_float32 value1 = *((jit_float32 *)($1));
        jit_float32 value2 = *((jit_float32 *)($2));

        if(value1 == value2)
        {
            inst = output_branch(func, inst, 0xEB /* jmp */, insn);
        }
    }
    [imm, local] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, ((jit_uint *)($1))[0]);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
    }
    [imm, freg] -> {
        x86_mov_membase_imm(inst, X86_ESP, -16, ((jit_uint *)($1))[0], 4);
        sse_comiss_xmreg_membase(inst, $2, X86_ESP, -16);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
    }
    [local, imm] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1, ((jit_uint *)($2))[0]);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
    }
    [local, local] -> {
        if($1 != $2)
        {
	    find_one_xmm_reg_cond2_vreg(inst, value1->vreg, value2->vreg);
//	    inst = jite_allocate_local_register(inst, func, insn->value1->vreg, insn->value1->vreg, insn->value2->vreg, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &xmmreg1);
//          find_one_xmm_reg(inst);
            sse_movss_xmreg_membase(inst, xmmreg1, X86_EBP, $1);
            sse_comiss_xmreg_membase(inst, xmmreg1, X86_EBP, $2);
            
            inst = output_branch(func, inst, 0x74 /* eq */, insn);
        }
        else
        {
            inst = output_branch(func, inst, 0xEB /* jmp */, insn);
        }
    }
    [local, freg] -> {
        sse_comiss_xmreg_membase(inst, $2, X86_EBP, $1);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
    }
    [freg, imm] -> {
        x86_mov_membase_imm(inst, X86_ESP, -16, ((jit_uint *)($2))[0], 4);
        sse_comiss_xmreg_membase(inst, $1, X86_ESP, -16);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
    }
    [freg, local] -> {
        sse_comiss_xmreg_membase(inst, $1, X86_EBP, $2);
        inst = output_branch(func, inst, 0x74 /* eq */, insn);
    }
    [freg, freg] -> {
        if($1 != $2)
        {
            sse_comiss_xmreg_xmreg(inst, $1, $2);
            inst = output_branch(func, inst, 0x74 /* eq */, insn);
        }
        else
        {
            inst = output_branch(func, inst, 0xEB /* jmp */, insn);
        }
    }

JIT_OP_BR_FNE, JIT_OP_BR_FNE_INV:
    [imm, imm] -> {
        jit_float32 value1 = *((jit_float32 *)($1));
        jit_float32 value2 = *((jit_float32 *)($2));
        if(value1 != value2)
        {    
            inst = output_branch(func, inst, 0xEB /* jmp */, insn);
        }
    }
    [imm, local] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, ((jit_uint *)($1))[0]);
        inst = output_branch(func, inst, 0x75 /* ne */, insn);
    }
    [imm, freg] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -16, $1, sourceType);
        sse_comiss_xmreg_membase(inst, $2, X86_ESP, -16);
        inst = output_branch(func, inst, 0x75 /* ne */, insn);
    }
    [local, imm] -> {
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1, ((jit_uint *)($2))[0]);
        inst = output_branch(func, inst, 0x75 /* ne */, insn);
    }
    [local, local] -> {
        if($1 != $2)
        {
//          find_one_xmm_reg(inst);

            find_one_xmm_reg_cond2_vreg(inst, value1->vreg, value2->vreg);

//	    inst = jite_allocate_local_register(inst, func, insn->value1->vreg, insn->value1->vreg, insn->value2->vreg, LOCAL_ALLOCATE_FOR_TEMP, 0, JIT_TYPE_PTR, &xmmreg1);
            sse_movss_xmreg_membase(inst, xmmreg1, X86_EBP, $1);
            sse_comiss_xmreg_membase(inst, xmmreg1, X86_EBP, $2);
            inst = output_branch(func, inst, 0x75 /* ne */, insn);
        }
    }
    [local, freg] -> {
        sse_comiss_xmreg_membase(inst, $2, X86_EBP, $1);
        inst = output_branch(func, inst, 0x75 /* ne */, insn);
    }
    [freg, imm] -> {
        x86_mov_membase_imm(inst, X86_ESP, -16, ((jit_uint *)($2))[0], 4);
        sse_comiss_xmreg_membase(inst, $1, X86_ESP, -16);
        inst = output_branch(func, inst, 0x75 /* ne */, insn);
    }
    [freg, local] -> {
        sse_comiss_xmreg_membase(inst, $1, X86_EBP, $2);
        inst = output_branch(func, inst, 0x75 /* ne */, insn);
    }
    [freg, freg] -> {
        if($1 != $2)
        {
            sse_comiss_xmreg_xmreg(inst, $1, $2);
            inst = output_branch(func, inst, 0x74 /* ne */, insn);
        }
    }

JIT_OP_CHECK_NULL:
    [imm] -> {
        if($1 == 0)
        {
            inst = jite_throw_builtin(inst, func, JIT_RESULT_NULL_REFERENCE);
        }
    }
    [local] -> {
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $1, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_NULL_REFERENCE);
        x86_patch(patch, inst);
    }
    [reg] -> {
        unsigned char *patch;
        x86_alu_reg_reg(inst, X86_OR, $1, $1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_NULL_REFERENCE);
        x86_patch(patch, inst);
    }

JIT_OP_JUMP_TABLE:
    [=reg, imm, imm] -> {
        unsigned char *patch_jump_table;
        unsigned char *patch_fall_through;
        int index;
        jit_label_t *labels;
        jit_nint num_labels;
        jit_block_t block;

        labels = (jit_label_t *) $2;
        num_labels = $3;

        x86_alu_reg_imm(inst, X86_CMP, $1, num_labels);
        patch_fall_through = inst;
        x86_branch32(inst, X86_CC_AE, 0, 0);

        if(func->builder->position_independent)
        {
            /* TODO */
        }
        else
        {
            patch_jump_table = inst;
            x86_jump_memindex(inst, X86_NOBASEREG, 0, $1, 2);
            while(((jit_nint) inst & (sizeof(void*) - 1)) != 0)
            {
                x86_nop(inst);
            }

            // displacement goes after opcode. ModR/M, and SIB bytes
            *((void **)(patch_jump_table + 3)) = inst;
        }

        for(index = 0; index < num_labels; index++)
        {
            block = jit_block_from_label(func, labels[index]);
            if(!block)
            {
                return;
            }

            if(func->builder->position_independent)
            {
                /* TODO */
            }
            else
            {
                if(block->address)
                {
                    x86_imm_emit32(inst, block->address);
                }
                else
                {
                    /* Output a placeholder and record on the block's fixup list */
                    x86_imm_emit32(inst, (int)(block->fixup_absolute_list));
                    block->fixup_absolute_list = (void *)(inst - 4);
                }
            }
        }

        x86_patch(patch_fall_through, inst);
    }
