JIT_OP_IADD, JIT_OP_IOR, JIT_OP_IAND, JIT_OP_IXOR, JIT_OP_ADD_RELATIVE, JIT_OP_LADD, JIT_OP_LOR, JIT_OP_LAND, JIT_OP_LXOR:
    [=local, imm, imm] -> {
        inst = masm_mov_membase_imm(inst, X86_EBP, $1, $2, sourceType);
        inst = masm_alu_membase_imm(inst, machine_code1, machine_code2, X86_EBP, $1, $3);
    }
    [=local, imm, local] -> {
        if($1 != $3)
        {
            find_one_gp_reg(inst);
            if(!machine_code2)
            {
                x86_mov_reg_imm(inst, gpreg1, $2);
            }
            else
            {
                x86_mov_reg_imm(inst, gpreg1, ((jit_nint *)($2))[0]);
            }
            x86_alu_reg_membase(inst, machine_code1, gpreg1, X86_EBP, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            if(machine_code2)
            {
                x86_mov_reg_imm(inst, gpreg1, ((jit_nint *)($2))[1]);
                x86_alu_reg_membase(inst, machine_code2, gpreg1, X86_EBP, $3 + 4);
                x86_mov_membase_reg(inst, X86_EBP, $1 + 4, gpreg1, 4);
            }
            
        }
        else
        {
            inst = masm_alu_membase_imm(inst, machine_code1, machine_code2, X86_EBP, $1, $2);
        }
    }
    [=local, local, imm] -> {
        if($1 != $2)
        {
            find_one_gp_reg(inst);
            if(!machine_code2)
            {
                x86_mov_reg_imm(inst, gpreg1, $3);
            }
            else
            {
                x86_mov_reg_imm(inst, gpreg1, ((jit_nint *)($3))[0]);
            }
            x86_alu_reg_membase(inst, machine_code1, gpreg1, X86_EBP, $2);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            if(machine_code2)
            {
                x86_mov_reg_imm(inst, gpreg1, ((jit_nint *)($3))[1]);
                x86_alu_reg_membase(inst, machine_code2, gpreg1, X86_EBP, $2 + 4);
                x86_mov_membase_reg(inst, X86_EBP, $1 + 4, gpreg1, 4);
            }
            
        }
        else
        {
            inst = masm_alu_membase_imm(inst, machine_code1, machine_code2, X86_EBP, $1, $3);
        }
    }
    [=local, imm, reg] -> {
        if(!jite_gp_reg_is_free(func, $3))
        {
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $3, sourceType);
                inst = masm_alu_membase_imm(inst, machine_code1, machine_code2, X86_EBP, $1, $2);
        }
        else
        {
            inst = masm_alu_reg_imm(inst, machine_code1, machine_code2, $3, $2);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $3, sourceType);
        }
    }
    [=local, local, local] -> {
        find_one_gp_reg(inst);
        if($1 != $2 && $1 != $3)
        {
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
            x86_alu_reg_membase(inst, machine_code1, gpreg1, X86_EBP, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            if(machine_code2)
            {
                x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2 + 4, 4);
                x86_alu_reg_membase(inst, machine_code2, gpreg1, X86_EBP, $3 + 4);
                x86_mov_membase_reg(inst, X86_EBP, $1 + 4, gpreg1, 4);
            }
        }
        else if($1 == $2)
        {
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $3, 4);
            x86_alu_membase_reg(inst, machine_code1, X86_EBP, $1, gpreg1);
            if(machine_code2)
            {
                x86_mov_reg_membase(inst, gpreg1, X86_EBP, $3, 4);
                x86_alu_membase_reg(inst, machine_code2, X86_EBP, $1, gpreg1);
            }
        }
        else
        {
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
            x86_alu_membase_reg(inst, machine_code1, X86_EBP, $1, gpreg1);
            if(machine_code2)
            {
                x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
                x86_alu_membase_reg(inst, machine_code2, X86_EBP, $1, gpreg1);
            }
        }
        
    }
    [=local, local, reg] -> {
        if($1 != $2)
        {
            if(jite_gp_reg_is_free(func, $3))
            {
                inst = masm_alu_reg_membase(inst, machine_code1, machine_code2, $3, X86_EBP, $2);
                inst = masm_mov_membase_reg(inst, X86_EBP, $1, $3, sourceType);
            }
            else if(have_free_gpregs())
            {
                find_one_gp_reg(inst);
                x86_mov_reg_reg(inst, gpreg1, $3, 4);
                x86_alu_reg_membase(inst, machine_code1, gpreg1, X86_EBP, $2);
                x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
                if(machine_code2)
                {
                    x86_mov_reg_reg(inst, gpreg1, jite_register_pair($3), 4);
                    x86_alu_reg_membase(inst, machine_code2, gpreg1, X86_EBP, $2 + 4);
                    x86_mov_membase_reg(inst, X86_EBP, $1 + 4, gpreg1, 4);
                }

                
            }
            else
            {
                inst = masm_mov_membase_reg(inst, X86_ESP, -8, $3, sourceType);
                inst = masm_alu_reg_membase(inst, machine_code1, machine_code2, $3, X86_EBP, $2);
                inst = masm_mov_membase_reg(inst, X86_EBP, $1, $3, sourceType);
                inst = masm_mov_reg_membase(inst, $3, X86_ESP, -8, sourceType);
            }
        }
        else
        {
            inst = masm_alu_membase_reg(inst, machine_code1, machine_code2, X86_EBP, $1, $3);
        }
    }
    [=local, reg, imm] -> {
        if(!jite_gp_reg_is_free(func, $2))
        {
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $2, sourceType);
            inst = masm_alu_membase_imm(inst, machine_code1, machine_code2, X86_EBP, $1, $3); 
        }
        else
        {
            inst = masm_alu_reg_imm(inst, machine_code1, machine_code2, $2, $3);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $2, sourceType);
        }
    }
    [=local, reg, local] -> {
        if($1 != $3)
        {
            if(jite_gp_reg_is_free(func, $2))
            {
                inst = masm_alu_reg_membase(inst, machine_code1, machine_code2, $2, X86_EBP, $3);
                inst = masm_mov_membase_reg(inst, X86_EBP, $1, $2, sourceType);
            }
            else if(have_free_gpregs())
            {
                find_one_gp_reg(inst);
                x86_mov_reg_reg(inst, gpreg1, $2, 4);
                x86_alu_reg_membase(inst, machine_code1, gpreg1, X86_EBP, $3);
                x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
                if(machine_code2)
                {
                    x86_mov_reg_reg(inst, gpreg1, jite_register_pair($2), 4);
                    x86_alu_reg_membase(inst, machine_code2, gpreg1, X86_EBP, $3 + 4);
                    x86_mov_membase_reg(inst, X86_EBP, $1 + 4, gpreg1, 4);
                }

                
            }
            else
            {
                inst = masm_mov_membase_reg(inst, X86_ESP, -8, $2, sourceType);
                inst = masm_alu_reg_membase(inst, machine_code1, machine_code2, $2, X86_EBP, $3);
                inst = masm_mov_membase_reg(inst, X86_EBP, $1, $2, sourceType);
                inst = masm_mov_reg_membase(inst, $2, X86_ESP, -8, sourceType);
            }
        }
        else
        {
            inst = masm_alu_membase_reg(inst, machine_code1, machine_code2, X86_EBP, $1, $2);
        }
    }
    [=local, reg, reg] -> {
        if(!jite_gp_reg_is_free(func, $2) && !jite_gp_reg_is_free(func, $3))
        {
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $2, sourceType);
                inst = masm_alu_membase_reg(inst, machine_code1, machine_code2, X86_EBP, $1, $3);
        }
        else if(jite_gp_reg_is_free(func, $2))
        {
            inst = masm_alu_reg_reg(inst, machine_code1, machine_code2, $2, $3);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $2, sourceType);
        }
        else
        {
            inst = masm_alu_reg_reg(inst, machine_code1, machine_code2, $3, $2);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $3, sourceType);
        }
    }
    [=reg, imm, imm] -> {
        inst = masm_mov_reg_imm(inst, $1, $2, sourceType);
        inst = masm_alu_reg_imm(inst, machine_code1, machine_code2, $1, $3);
    }
    [=reg, imm, local] -> {
        inst = masm_mov_reg_membase(inst, $1, X86_EBP, $3, sourceType);
        inst = masm_alu_reg_imm(inst, machine_code1, machine_code2, $1, $2);
    }
    [=reg, imm, reg] -> {
        if($1 != $3) inst = masm_mov_reg_reg(inst, $1, $3, sourceType);
        inst = masm_alu_reg_imm(inst, machine_code1, machine_code2, $1, $2);
    }
    [=reg, local, imm] -> {
        inst = masm_mov_reg_membase(inst, $1, X86_EBP, $2, sourceType);
        inst = masm_alu_reg_imm(inst, machine_code1, machine_code2, $1, $3);
    }
    [=reg, local, local] -> {
        inst = masm_mov_reg_membase(inst, $1, X86_EBP, $2, sourceType);
        inst = masm_alu_reg_membase(inst, machine_code1, machine_code2, $1, X86_EBP, $3);
    }
    [=reg, local, reg] -> {
        if($1 != $3) inst = masm_mov_reg_reg(inst, $1, $3, sourceType);
        inst = masm_alu_reg_membase(inst, machine_code1, machine_code2, $1, X86_EBP, $2);
    }
    [=reg, reg, imm] -> {
        if($1 != $2) inst = masm_mov_reg_reg(inst, $1, $2, sourceType);
        inst = masm_alu_reg_imm(inst, machine_code1, machine_code2, $1, $3);
    }
    [=reg, reg, local] -> {
        if($1 != $2)
        {
                inst = masm_mov_reg_reg(inst, $1, $2, sourceType);
                inst = masm_alu_reg_membase(inst, machine_code1, machine_code2, $1, X86_EBP, $3);
        }
        else inst = masm_alu_reg_membase(inst, machine_code1, machine_code2, $1, X86_EBP, $3);
    }
    [=reg, reg, reg] -> {
        if($1 != $2 && $1 != $3)
        {
            inst = masm_mov_reg_reg(inst, $1, $2, sourceType);
            inst = masm_alu_reg_reg(inst, machine_code1, machine_code2, $1, $3);
        }
        else if($1 == $3) inst = masm_alu_reg_reg(inst, machine_code1, machine_code2, $1, $2);
        else inst = masm_alu_reg_reg(inst, machine_code1, machine_code2, $1, $3);
    }

JIT_OP_ISUB:
    [=local, imm, imm] -> {
        x86_mov_membase_imm(inst, X86_EBP, $1, $2 - $3, 4);
    }
    [=local, imm, local] -> {
        find_one_gp_reg(inst);
        x86_mov_reg_imm(inst, gpreg1, $2);
        x86_alu_reg_membase(inst, X86_SUB, gpreg1, X86_EBP, $3);
        x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
        
    }
    [=local, imm, reg] -> {
        x86_mov_membase_imm(inst, X86_EBP, $1, $2, 4);
        x86_alu_membase_reg(inst, X86_SUB, X86_EBP, $1, $3);
    }
    [=local, local, imm] -> {
        if($1 != $2)
        {
            find_one_gp_reg(inst);
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
            x86_alu_reg_imm(inst, X86_SUB, gpreg1, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            
        }
        else x86_alu_membase_imm(inst, X86_SUB, X86_EBP, $1, $3);
    }
    [=local, local, local] -> {
        if($1 != $2 && $2 != $3)
        {
            find_one_gp_reg(inst);
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
            x86_alu_reg_membase(inst, X86_SUB, gpreg1, X86_EBP, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            
        }
        else if($1 == $2 && $2 != $3)
        {
            find_one_gp_reg(inst);
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $3, 4);
            x86_alu_membase_reg(inst, X86_SUB, X86_EBP, $1, gpreg1);
            
        }
        else
        {
            x86_mov_membase_imm(inst, X86_EBP, $1, 0, 4);
        }
    }
    [=local, local, reg] -> {
        if($1 != $2)
        {
            find_one_gp_reg_cond1(inst, $3);
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
            x86_alu_reg_reg(inst, X86_SUB, gpreg1, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            
        }
        else
        {
            x86_alu_membase_reg(inst, X86_SUB, X86_EBP, $1, $3);
        }
    }
    [=local, reg, imm] -> {
        x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
        if($3) x86_alu_membase_imm(inst, X86_SUB, X86_EBP, $1, $3); 
    }
    [=local, reg, local] -> {
        if(jite_gp_reg_is_free(func, $2))
        {
            x86_alu_reg_membase(inst, X86_SUB, $2, X86_EBP, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
        }
        else if(have_free_gpregs())
        {
            find_one_gp_reg(inst);
            x86_mov_reg_reg(inst, gpreg1, $2, 4);
            x86_alu_reg_membase(inst, X86_SUB, gpreg1, X86_EBP, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            
        }
        else
        {
            x86_mov_membase_reg(inst, X86_ESP, -4, $2, 4);
            x86_alu_reg_membase(inst, X86_SUB, $2, X86_EBP, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
            x86_mov_reg_membase(inst, $2, X86_ESP, -4, 4);
        }
    }
    [=local, reg, reg] -> {
        if(!jite_gp_reg_is_free(func, $2))
        {
            x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
            x86_alu_membase_reg(inst, X86_SUB, X86_EBP, $1, $3);
        }
        else
        {
            x86_alu_reg_reg(inst, X86_SUB, $2, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
        }
    }
    [=reg, imm, imm] -> {
        x86_mov_reg_imm(inst, $1, $2 - $3);
    }
    [=reg, imm, local] -> {
        x86_mov_reg_imm(inst, $1, $2);
        x86_alu_reg_membase(inst, X86_SUB, $1, X86_EBP, $3);
    }
    [=reg, imm, reg] -> {
        if($1 != $3)
        {
            x86_mov_reg_imm(inst, $1, $2);
            x86_alu_reg_reg(inst, X86_SUB, $1, $3);
        }
        else
        {
            find_one_gp_reg_cond1(inst, $1);
            x86_mov_reg_imm(inst, gpreg1, $2);
            x86_alu_reg_reg(inst, X86_SUB, gpreg1, $3);
            x86_mov_reg_reg(inst, $1, gpreg1, 4);
            
        }
    }
    [=reg, local, imm] -> {
        x86_mov_reg_membase(inst, $1, X86_EBP, $2, 4);
        if($3) x86_alu_reg_imm(inst, X86_SUB, $1, $3);
    }
    [=reg, local, local] -> {
        if($2 != $3)
        {
            x86_mov_reg_membase(inst, $1, X86_EBP, $2, 4);
            x86_alu_reg_membase(inst, X86_SUB, $1, X86_EBP, $3);
        }
        else x86_clear_reg(inst, $1);
    }
    [=reg, local, reg] -> {
        if($1 != $3)
        {
            x86_mov_reg_membase(inst, $1, X86_EBP, $2, 4);
            x86_alu_reg_reg(inst, X86_SUB, $1, $3);
        }
        else
        {
            find_one_gp_reg_cond1(inst, $1);
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
            x86_alu_reg_reg(inst, X86_SUB, gpreg1, $3);
            x86_mov_reg_reg(inst, $1, gpreg1, 4);
            
        }
    }
    [=reg, reg, imm] -> {
        if($1 != $2) x86_mov_reg_reg(inst, $1, $2, 4);
        if($3) x86_alu_reg_imm(inst, X86_SUB, $1, $3);
    }
    [=reg, reg, local] -> {
        if($1 != $2)
        {
                x86_mov_reg_reg(inst, $1, $2, 4);
                x86_alu_reg_membase(inst, X86_SUB, $1, X86_EBP, $3);
        }
        else x86_alu_reg_membase(inst, X86_SUB, $1, X86_EBP, $3);
    }
    [=reg, reg, reg] -> {
        if($1 != $3 && $2 != $3)
        {
            if($1 != $2) x86_mov_reg_reg(inst, $1, $2, 4);
            x86_alu_reg_reg(inst, X86_SUB, $1, $3);
        }
        else if($2 != $3)
        {
            find_one_gp_reg_cond1(inst, $3);
            x86_mov_reg_reg(inst, gpreg1, $2, 4);
            x86_alu_reg_reg(inst, X86_SUB, gpreg1, $3);
            x86_mov_reg_reg(inst, $1, gpreg1, 4);
            
        }
        else
        {
            x86_clear_reg(inst, $1);
        }
    }

JIT_OP_IMUL:
    [=local, imm, imm] -> {
        x86_mov_membase_imm(inst, X86_EBP, $1, $2 * $3, 4);
    }
    [=local, imm, local] -> {
        find_one_gp_reg(inst);
        x86_mov_reg_membase(inst, gpreg1, X86_EBP, $3, 4);
        inst = masm_imul_reg_reg_imm(inst, gpreg1, gpreg1, $2);
        x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
        
    }
    [=local, imm, reg] -> {
        find_one_gp_reg(inst);
        inst = masm_imul_reg_reg_imm(inst, gpreg1, $3, $2);
        x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
        
    }
    [=local, local, imm] -> {
        find_one_gp_reg(inst);
        x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
        inst = masm_imul_reg_reg_imm(inst, gpreg1, gpreg1, $3);
        x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
        
    }
    [=local, local, local] -> {
        find_one_gp_reg(inst);
        x86_mov_reg_membase(inst, gpreg1, X86_EBP, $3, 4);
        x86_imul_reg_membase(inst, gpreg1, X86_EBP, $2);
        x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
        
    }
    [=local, local, reg] -> {
        if(jite_gp_reg_is_free(func, $3))
        {
            x86_imul_reg_membase(inst, $3, X86_EBP, $2);
            x86_mov_membase_reg(inst, X86_EBP, $1, $3, 4);
        }
        else if(have_free_gpregs())
        {
            find_one_gp_reg(inst);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_imul_reg_membase(inst, gpreg1, X86_EBP, $2);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            
        }
        else
        {
            x86_mov_membase_reg(inst, X86_ESP, -4, $3, 4);
            x86_imul_reg_membase(inst, $3, X86_EBP, $2);
            x86_mov_membase_reg(inst, X86_EBP, $1, $3, 4);
            x86_mov_reg_membase(inst, $3, X86_ESP, -4, 4);
        }
    }
    [=local, reg, imm] -> {
        find_one_gp_reg(inst);
        inst = masm_imul_reg_reg_imm(inst, gpreg1, $2, $3);
        x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
        
    }
    [=local, reg, local] -> {
        if(jite_gp_reg_is_free(func, $2))
        {
            x86_imul_reg_membase(inst, $2, X86_EBP, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
        }
        else if(have_free_gpregs())
        {
            find_one_gp_reg(inst);
            x86_mov_reg_reg(inst, gpreg1, $2, 4);
            x86_imul_reg_membase(inst, gpreg1, X86_EBP, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            
        }
        else
        {
            x86_mov_membase_reg(inst, X86_ESP, -4, $2, 4);
            x86_imul_reg_membase(inst, $2, X86_EBP, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
            x86_mov_reg_membase(inst, $2, X86_ESP, -4, 4);
        }
    }
    [=local, reg, reg] -> {
        if(jite_gp_reg_is_free(func, $2))
        {
            x86_imul_reg_reg(inst, $2, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
        }
        else if(jite_gp_reg_is_free(func, $3))
        {
            x86_imul_reg_reg(inst, $3, $2);
            x86_mov_membase_reg(inst, X86_EBP, $1, $3, 4);
        }
        else if(have_free_gpregs())
        {
            find_one_gp_reg(inst);
            x86_mov_reg_reg(inst, gpreg1, $2, 4);
            x86_imul_reg_reg(inst, gpreg1, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            
        }
        else
        {
            x86_mov_membase_reg(inst, X86_ESP, -4, $2, 4);
            x86_imul_reg_reg(inst, $2, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
            x86_mov_reg_membase(inst, $2, X86_ESP, -4, 4);
        }
    }
    [=reg, imm, imm] -> {
        x86_mov_reg_imm(inst, $1, $2 * $3);
    }
    [=reg, imm, local] -> {
        x86_mov_reg_membase(inst, $1, X86_EBP, $3, 4);
        inst = masm_imul_reg_reg_imm(inst, $1, $1, $2);
    }
    [=reg, imm, reg] -> {
        inst = masm_imul_reg_reg_imm(inst, $1, $3, $2);
    }
    [=reg, local, imm] -> {
        x86_mov_reg_membase(inst, $1, X86_EBP, $2, 4);
        inst = masm_imul_reg_reg_imm(inst, $1, $1, $3);
    }
    [=reg, local, local] -> {
        x86_mov_reg_membase(inst, $1, X86_EBP, $2, 4);
        x86_imul_reg_membase(inst, $1, X86_EBP, $3);
    }
    [=reg, local, reg] -> {
        if($1 != $3) x86_mov_reg_reg(inst, $1, $3, 4);
        x86_imul_reg_membase(inst, $1, X86_EBP, $2);    
    }
    [=reg, reg, imm] -> {
        inst = masm_imul_reg_reg_imm(inst, $1, $2, $3);
    }
    [=reg, reg, local] -> {
        if($1 != $2) x86_mov_reg_reg(inst, $1, $2, 4);
        x86_imul_reg_membase(inst, $1, X86_EBP, $3);
    }
    [=reg, reg, reg] -> {
        if($1 != $2 && $1 != $3)
        {
            x86_mov_reg_reg(inst, $1, $3, 4);
            x86_imul_reg_reg(inst, $1, $2);
        }
        else if($1 == $3)
        {
            x86_imul_reg_reg(inst, $1, $2);
        }
        else
        {
            x86_imul_reg_reg(inst, $1, $3);
        }
    }

JIT_OP_IDIV:
    [=local, imm, imm] -> {
        if($3 != 0 && ($3 != -1 || $2 != jit_min_int))
        {
            x86_mov_membase_imm(inst, X86_EBP, $1, $2 / $3, 4);
        }
        else if($3 == 0)
        {
            inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        }
        else
        {
            inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        }
    }
    [=local, imm, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        if($2 == jit_min_int)
        {
            x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, -1);
            patch = inst;
            x86_branch8(inst, X86_CC_NE, 0, 0);
            inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
            x86_patch(patch, inst);
        }
        #endif

        x86_mov_reg_imm(inst, X86_EAX, $2);
        x86_cdq(inst);
        x86_div_membase(inst, X86_EBP, $3, 1);
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EAX, 4);
    }
    [=local, imm, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        if($2 == jit_min_int)
        {
            x86_alu_reg_imm(inst, X86_CMP, $3, -1);
            patch = inst;
            x86_branch8(inst, X86_CC_NE, 0, 0);
            inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
            x86_patch(patch, inst);
        }
        #endif
        
        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_cdq(inst);
            x86_div_reg(inst, $3, 1);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_cdq(inst);
            x86_div_reg(inst, gpreg1, 1);
            
        }
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EAX, 4);
    }
    [=local, local, imm] -> {    
        find_one_gp_reg(inst);
        x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
        inst = masm_idiv_reg_reg_imm(inst, gpreg1, gpreg1, $3);
        x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
        
    }
    [=local, local, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
        x86_cdq(inst);
        x86_div_membase(inst, X86_EBP, $3, 1);
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EAX, 4);
    }
    [=local, local, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_reg_imm(inst, X86_CMP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif
        
        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_cdq(inst);
            x86_div_reg(inst, $3, 1);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_cdq(inst);
            x86_div_reg(inst, gpreg1, 1);
            
        }

        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EAX, 4);
    }
    [=local, reg, imm] -> {
        if(!jite_gp_reg_is_free(func, $2))
        {
            find_one_gp_reg(inst);
            inst = masm_idiv_reg_reg_imm(inst, gpreg1, $2, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            
        }
        else
        {
            inst = masm_idiv_reg_reg_imm(inst, $2, $2, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
        }
    }
    [=local, reg, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_reg_imm(inst, X86_CMP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
        x86_cdq(inst);
        x86_div_membase(inst, X86_EBP, $3, 1);
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EAX, 4);
    }
    [=local, reg, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_reg_imm(inst, X86_CMP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_reg_imm(inst, X86_CMP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif
        if($3 != X86_EAX && $3 != X86_EDX)
        {
            if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
            x86_cdq(inst);
            x86_div_reg(inst, $3, 1);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            if(gpreg1 != $2)
            {
                x86_mov_reg_reg(inst, gpreg1, $3, 4);
                if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
            }
            else if($3 != X86_EAX)
            {
                if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                x86_mov_reg_reg(inst, gpreg1, $3, 4);
            }
            else
            {
                x86_xchg_reg_reg(inst, X86_EAX, gpreg1, 4);
            }
            x86_cdq(inst);
            x86_div_reg(inst, gpreg1, 1);
            
        }

        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EAX, 4);
    }
    [=reg, imm, imm] -> {
        if($3 != 0 && ($3 != -1 || $2 != jit_min_int))
        {
            x86_mov_reg_imm(inst, $1, $2 / $3);
        }
        else if($3 == 0)
        {
            inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        }
        else
        {
            inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        }
    }
    [=reg, imm, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);

        if($2 == jit_min_int)
        {
            x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, -1);
            patch = inst;
            x86_branch8(inst, X86_CC_NE, 0, 0);
            inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
            x86_patch(patch, inst);
        }
        #endif
        x86_mov_reg_imm(inst, X86_EAX, $2);
        x86_cdq(inst);
        x86_div_membase(inst, X86_EBP, $3, 1);
        if($1 != X86_EAX) x86_mov_reg_reg(inst, $1, X86_EAX, 4);
    }
    [=reg, imm, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        if($2 == jit_min_int)
        {
            x86_alu_reg_imm(inst, X86_CMP, $3, -1);
            patch = inst;
            x86_branch8(inst, X86_CC_NE, 0, 0);
            inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
            x86_patch(patch, inst);
        }
        #endif

        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_cdq(inst);
            x86_div_reg(inst, $3, 1);
        }
        else if($1 != X86_EAX && $1 != X86_EDX)
        {
            x86_mov_reg_reg(inst, $1, $3, 4);
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_cdq(inst);
            x86_div_reg(inst, $1, 1);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_cdq(inst);
            x86_div_reg(inst, gpreg1, 1);
            
        }
        if($1 != X86_EAX) x86_mov_reg_reg(inst, $1, X86_EAX, 4);
    }
    [=reg, local, imm] -> {
        x86_mov_reg_membase(inst, $1, X86_EBP, $2, 4);
        inst = masm_idiv_reg_reg_imm(inst, $1, $1, $3);
    }
    [=reg, local, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        if($2 != $3)
        {
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_cdq(inst);
            x86_div_membase(inst, X86_EBP, $3, 1);
            if($1 != X86_EAX) x86_mov_reg_reg(inst, $1, X86_EAX, 4);
        }
        else x86_mov_reg_imm(inst, $1, 1);
    }
    [=reg, local, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_reg_imm(inst, X86_CMP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_cdq(inst);
            x86_div_reg(inst, $3, 1);
        }
        else if($1 != X86_EAX && $1 != X86_EDX)
        {
            x86_mov_reg_reg(inst, $1, $3, 4);
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_cdq(inst);
            x86_div_reg(inst, $1, 1);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_cdq(inst);
            x86_div_reg(inst, gpreg1, 1);
            
        }

        if($1 != X86_EAX) x86_mov_reg_reg(inst, $1, X86_EAX, 4);
    }
    [=reg, reg, imm] -> {
        inst = masm_idiv_reg_reg_imm(inst, $1, $2, $3);
    }
    [=reg, reg, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_reg_imm(inst, X86_CMP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
        x86_cdq(inst);
        x86_div_membase(inst, X86_EBP, $3, 1);
        if($1 != X86_EAX) x86_mov_reg_reg(inst, $1, X86_EAX, 4);
    }
    [=reg, reg, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_reg_imm(inst, X86_CMP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_reg_imm(inst, X86_CMP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        if($2 != $3)
        {
            if($3 != X86_EAX && $3 != X86_EDX)
            {
                if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                x86_cdq(inst);
                x86_div_reg(inst, $3, 1);
            }
            else if($1 != X86_EAX && $1 != X86_EDX)
            {
                if($1 != $2)
                {
                    x86_mov_reg_reg(inst, $1, $3, 4);
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                }
                else if($3 != X86_EAX)
                {
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                    x86_mov_reg_reg(inst, $1, $3, 4);
                }
                else
                {
                    x86_xchg_reg_reg(inst, X86_EAX, $1, 4);
                }
                x86_cdq(inst);
                x86_div_reg(inst, $1, 1);
            }
            else
            {
                find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
                if(gpreg1 != $2)
                {
                    x86_mov_reg_reg(inst, gpreg1, $3, 4);
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                }
                else if($3 != X86_EAX)
                {
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                    x86_mov_reg_reg(inst, gpreg1, $3, 4);
                }
                else
                {
                    x86_xchg_reg_reg(inst, X86_EAX, gpreg1, 4);
                }
                x86_cdq(inst);
                x86_div_reg(inst, gpreg1, 1);

                
            }
            if($1 != X86_EAX) x86_mov_reg_reg(inst, $1, X86_EAX, 4);
        }
        else x86_mov_reg_imm(inst, $1, 1);
    }

JIT_OP_IDIV_UN:
    [=local, imm, imm] -> {
        if($3 != 0) x86_mov_membase_imm(inst, X86_EBP, $1, $2 / $3, 4);
        else inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
    }
    [=local, imm, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        x86_mov_reg_imm(inst, X86_EAX, $2);
        x86_clear_reg(inst, X86_EDX);
        x86_div_membase(inst, X86_EBP, $3, 0);
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EAX, 4);
    }
    [=local, imm, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif
        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $3, 0);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, gpreg1, 0);
            
        }

        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EAX, 4);
    }
    [=local, local, imm] -> {
        find_one_gp_reg(inst);
        x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
        inst = masm_idiv_un_reg_reg_imm(inst, gpreg1, gpreg1, $3);
        x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
        
    }
    [=local, local, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
        x86_clear_reg(inst, X86_EDX);
        x86_div_membase(inst, X86_EBP, $3, 0);
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EAX, 4);
    }
    [=local, local, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif
        
        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
                x86_clear_reg(inst, X86_EDX);
                x86_div_reg(inst, $3, 0);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
                x86_clear_reg(inst, X86_EDX);
                x86_div_reg(inst, gpreg1, 0);
            
        }

        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EAX, 4);
    }
    [=local, reg, imm] -> {
        if(!jite_gp_reg_is_free(func, $2))
        {
            find_one_gp_reg(inst);
            inst = masm_idiv_un_reg_reg_imm(inst, gpreg1, $2, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            
        }
        else
        {
            inst = masm_idiv_un_reg_reg_imm(inst, $2, $2, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
        }
    }
    [=local, reg, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
        x86_clear_reg(inst, X86_EDX);
        x86_div_membase(inst, X86_EBP, $3, 0);
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EAX, 4);
    }
    [=local, reg, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif
        if($3 != X86_EAX && $3 != X86_EDX)
        {
            if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $3, 0);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            if(gpreg1 != $2)
            {
                x86_mov_reg_reg(inst, gpreg1, $3, 4);
                if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
            }
            else if($3 != X86_EAX)
            {
                if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                x86_mov_reg_reg(inst, gpreg1, $3, 4);
            }
            else
            {
                x86_xchg_reg_reg(inst, X86_EAX, gpreg1, 4);
            }
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, gpreg1, 0);
            
        }

        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EAX, 4);
    }
    [=reg, imm, imm] -> {
        if($3 != 0) x86_mov_reg_imm(inst, $1, $2 / $3);
        else inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
    }
    [=reg, imm, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        x86_mov_reg_imm(inst, X86_EAX, $2);
        x86_clear_reg(inst, X86_EDX);
        x86_div_membase(inst, X86_EBP, $3, 0);
        if($1 != X86_EAX) x86_mov_reg_reg(inst, $1, X86_EAX, 4);
    }
    [=reg, imm, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $3, 0);
        }
        else if($1 != X86_EAX && $1 != X86_EDX)
        {
            x86_mov_reg_reg(inst, $1, $3, 4);
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $1, 0);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, gpreg1, 0);
            
        }
        if($1 != X86_EAX) x86_mov_reg_reg(inst, $1, X86_EAX, 4);
    }
    [=reg, local, imm] -> {
        x86_mov_reg_membase(inst, $1, X86_EBP, $2, 4);
        inst = masm_idiv_un_reg_reg_imm(inst, $1, $1, $3);
    }
    [=reg, local, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($2 != $3)
        {
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_clear_reg(inst, X86_EDX);
            x86_div_membase(inst, X86_EBP, $3, 0);
            if($1!=X86_EAX) x86_mov_reg_reg(inst, $1, X86_EAX, 4);
        }
        else x86_mov_reg_imm(inst, $1, 1);
    }
    [=reg, local, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $3, 0);
        }
        else if($1 != X86_EAX && $1 != X86_EDX)
        {
            x86_mov_reg_reg(inst, $1, $3, 4);
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $1, 0);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, gpreg1, 0);
            
        }

        if($1 != X86_EAX) x86_mov_reg_reg(inst, $1, X86_EAX, 4);
    }
    [=reg, reg, imm] -> {
        inst = masm_idiv_un_reg_reg_imm(inst, $1, $2, $3);
    }
    [=reg, reg, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
        x86_clear_reg(inst, X86_EDX);
        x86_div_membase(inst, X86_EBP, $3, 0);
        if($1 != X86_EAX) x86_mov_reg_reg(inst, $1, X86_EAX, 4);
    }
    [=reg, reg, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($2 != $3)
        {
            if($3 != X86_EAX && $3 != X86_EDX)
            {
                if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                x86_clear_reg(inst, X86_EDX);
                x86_div_reg(inst, $3, 0);
            }
            else if($1 != X86_EAX && $1 != X86_EDX)
            {
                if($1 != $2)
                {
                    x86_mov_reg_reg(inst, $1, $3, 4);
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                }
                else if($3 != X86_EAX)
                {
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                    x86_mov_reg_reg(inst, $1, $3, 4);
                }
                else
                {
                    x86_xchg_reg_reg(inst, X86_EAX, $1, 4);
                }
                x86_clear_reg(inst, X86_EDX);
                x86_div_reg(inst, $1, 0);
            }
            else
            {
                find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
                if(gpreg1 != $2)
                {
                    x86_mov_reg_reg(inst, gpreg1, $3, 4);
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                }
                else if($3 != X86_EAX)
                {
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                    x86_mov_reg_reg(inst, gpreg1, $3, 4);
                }
                else
                {
                    x86_xchg_reg_reg(inst, X86_EAX, gpreg1, 4);
                }
                x86_clear_reg(inst, X86_EDX);
                x86_div_reg(inst, gpreg1, 0);

                
            }

            if($1 != X86_EAX) x86_mov_reg_reg(inst, $1, X86_EAX, 4);
        }
        else x86_mov_reg_imm(inst, $1, 1);
    }

JIT_OP_IREM:
    [=local, imm, imm] -> {
        if($3 != 0 && ($3 != -1 || $2 != jit_min_int))
        {
            x86_mov_membase_imm(inst, X86_EBP, $1, $2 % $3, 4);    
        }
        else if($3 == 0) inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        else
        {
            inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        }
    }
    [=local, imm, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        if($2 == jit_min_int)
        {
            x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, -1);
            patch = inst;
            x86_branch8(inst, X86_CC_NE, 0, 0);
            inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
            x86_patch(patch, inst);
        }
        #endif

        x86_mov_reg_imm(inst, X86_EAX, $2);
        x86_cdq(inst);
        x86_div_membase(inst, X86_EBP, $3, 1);
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EDX, 4);
    }
    [=local, imm, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        if($2 == jit_min_int)
        {
            x86_alu_reg_imm(inst, X86_CMP, $3, -1);
            patch = inst;
            x86_branch8(inst, X86_CC_NE, 0, 0);
            inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
            x86_patch(patch, inst);
        }
        #endif
        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_cdq(inst);
            x86_div_reg(inst, $3, 1);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_cdq(inst);
            x86_div_reg(inst, gpreg1, 1);
            
        }

        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EDX, 4);
    }
    [=local, local, imm] -> {
        find_one_gp_reg(inst);
        x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
        inst = masm_irem_reg_reg_imm(inst, gpreg1, gpreg1, $3);
        x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
        
    }
    [=local, local, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
        x86_cdq(inst);
        x86_div_membase(inst, X86_EBP, $3, 1);
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EDX, 4);
    }
    [=local, local, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_reg_imm(inst, X86_CMP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_cdq(inst);
            x86_div_reg(inst, $3, 1);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_cdq(inst);
            x86_div_reg(inst, gpreg1, 1);
            
        }

        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EDX, 4);
    }
    [=local, reg, imm] -> {
        if(!jite_gp_reg_is_free(func, $2))
        {
            find_one_gp_reg(inst);
            inst = masm_irem_reg_reg_imm(inst, gpreg1, $2, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            
        }
        else
        {
            inst = masm_irem_reg_reg_imm(inst, $2, $2, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
        }
    }
    [=local, reg, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_reg_imm(inst, X86_CMP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        if($2!=X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
        x86_cdq(inst);
        x86_div_membase(inst, X86_EBP, $3, 1);
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EDX, 4);
    }
    [=local, reg, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_reg_imm(inst, X86_CMP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_reg_imm(inst, X86_CMP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        if($3 != X86_EAX && $3 != X86_EDX)
        {
            if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
            x86_cdq(inst);
            x86_div_reg(inst, $3, 1);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            if(gpreg1 != $2)
            {
                x86_mov_reg_reg(inst, gpreg1, $3, 4);
                if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
            }
            else if($3 != X86_EAX)
            {
                if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                x86_mov_reg_reg(inst, gpreg1, $3, 4);
            }
            else
            {
                x86_xchg_reg_reg(inst, X86_EAX, gpreg1, 4);
            }
            x86_cdq(inst);
            x86_div_reg(inst, gpreg1, 1);
            
        }

        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EDX, 4);
    }
    [=reg, imm, imm] -> {
        if($3 != 0 && ($3 != -1 || $2 != jit_min_int))
        {
            x86_mov_reg_imm(inst, $1, $2 % $3);    
        }
        else if($3 == 0) inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        else
        {
            inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        }
    }
    [=reg, imm, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);

        if($2 == jit_min_int)
        {
            x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, -1);
            patch = inst;
            x86_branch8(inst, X86_CC_NE, 0, 0);
            inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
            x86_patch(patch, inst);
        }
        #endif
        
        x86_mov_reg_imm(inst, X86_EAX, $2);
        x86_cdq(inst);
        x86_div_membase(inst, X86_EBP, $3, 1);
        if($1 != X86_EDX) x86_mov_reg_reg(inst, $1, X86_EDX, 4);
    }
    [=reg, imm, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        if($2 == jit_min_int)
        {
            x86_alu_reg_imm(inst, X86_CMP, $3, -1);
            patch = inst;
            x86_branch8(inst, X86_CC_NE, 0, 0);
            inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
            x86_patch(patch, inst);
        }
        #endif

        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_cdq(inst);
            x86_div_reg(inst, $3, 1);
        }
        else if($1 != X86_EAX && $1 != X86_EDX)
        {
            x86_mov_reg_reg(inst, $1, $3, 4);
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_cdq(inst);
            x86_div_reg(inst, $1, 1);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_cdq(inst);
            x86_div_reg(inst, gpreg1, 1);
            
        }
        if($1!=X86_EDX) x86_mov_reg_reg(inst, $1, X86_EDX, 4);
    }
    [=reg, local, imm] -> {
        x86_mov_reg_membase(inst, $1, X86_EBP, $2, 4);
        inst = masm_irem_reg_reg_imm(inst, $1, $1, $3);
    }
    [=reg, local, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        if($2 != $3)
        {
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_cdq(inst);
            x86_div_membase(inst, X86_EBP, $3, 1);
            if($1!=X86_EDX) x86_mov_reg_reg(inst, $1, X86_EDX, 4);
        }
        else x86_mov_reg_imm(inst, $1, 0);
    }
    [=reg, local, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_reg_imm(inst, X86_CMP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_cdq(inst);
            x86_div_reg(inst, $3, 1);
        }
        else if($1 != X86_EAX && $1 != X86_EDX)
        {
            x86_mov_reg_reg(inst, $1, $3, 4);
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_cdq(inst);
            x86_div_reg(inst, $1, 1);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_cdq(inst);
            x86_div_reg(inst, gpreg1, 1);
            
        }

        if($1 != X86_EDX) x86_mov_reg_reg(inst, $1, X86_EDX, 4);
    }
    [=reg, reg, imm] -> {
        inst = masm_irem_reg_reg_imm(inst, $1, $2, $3);
    }
    [=reg, reg, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_reg_imm(inst, X86_CMP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
        x86_cdq(inst);
        x86_div_membase(inst, X86_EBP, $3, 1);
        if($1!=X86_EDX) x86_mov_reg_reg(inst, $1, X86_EDX, 4);
    }
    [=reg, reg, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch, *patch2;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        x86_alu_reg_imm(inst, X86_CMP, $3, -1);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        x86_alu_reg_imm(inst, X86_CMP, $2, jit_min_int);
        patch2 = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_ARITHMETIC);
        x86_patch(patch, inst);
        x86_patch(patch2, inst);
        #endif

        if($2 != $3)
        {
            if($3 != X86_EAX && $3 != X86_EDX)
            {
                if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                x86_cdq(inst);
                x86_div_reg(inst, $3, 1);
            }
            else if($1 != X86_EAX && $1 != X86_EDX)
            {
                if($1 != $2)
                {
                    x86_mov_reg_reg(inst, $1, $3, 4);
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                }
                else if($3 != X86_EAX)
                {
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                    x86_mov_reg_reg(inst, $1, $3, 4);
                }
                else
                {
                    x86_xchg_reg_reg(inst, X86_EAX, $1, 4);
                }
                x86_cdq(inst);
                x86_div_reg(inst, $1, 1);
            }
            else
            {
                find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
                if(gpreg1 != $2)
                {
                    x86_mov_reg_reg(inst, gpreg1, $3, 4);
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                }
                else if($3 != X86_EAX)
                {
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                    x86_mov_reg_reg(inst, gpreg1, $3, 4);
                }
                else
                {
                    x86_xchg_reg_reg(inst, X86_EAX, gpreg1, 4);
                }
                x86_cdq(inst);
                x86_div_reg(inst, gpreg1, 1);

                
            }

            if($1 != X86_EDX) x86_mov_reg_reg(inst, $1, X86_EDX, 4);            
        }
        else x86_mov_reg_imm(inst, $1, 1);
    }

JIT_OP_IREM_UN:
    [=local, imm, imm] -> {
        if($3 != 0) x86_mov_membase_imm(inst, X86_EBP, $1, $2 % $3, 4);
        else inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
    }
    [=local, imm, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        x86_mov_reg_imm(inst, X86_EAX, $2);
        x86_clear_reg(inst, X86_EDX);
        x86_div_membase(inst, X86_EBP, $3, 0);
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EDX, 4);
    }
    [=local, imm, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif
        
        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $3, 0);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, gpreg1, 0);
            
        }
        
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EDX, 4);
    }
    [=local, local, imm] -> {
        find_one_gp_reg(inst);
        x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
        inst = masm_irem_un_reg_reg_imm(inst, gpreg1, gpreg1, $3);
        x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
        
    }
    [=local, local, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
        x86_clear_reg(inst, X86_EDX);
        x86_div_membase(inst, X86_EBP, $3, 0);
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EDX, 4);
    }
    [=local, local, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $3, 0);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, gpreg1, 0);
            
        }
        
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EDX, 4);
    }
    [=local, reg, imm] -> {
        if(!jite_gp_reg_is_free(func, $2))
        {
            find_one_gp_reg(inst);
            inst = masm_irem_un_reg_reg_imm(inst, gpreg1, $2, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            
        }
        else
        {
            inst = masm_irem_un_reg_reg_imm(inst, $2, $2, $3);
            x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
        }
    }
    [=local, reg, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
        x86_clear_reg(inst, X86_EDX);
        x86_div_membase(inst, X86_EBP, $3, 0);
        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EDX, 4);
    }
    [=local, reg, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif
        if($3 != X86_EAX && $3 != X86_EDX)
        {
            if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $3, 0);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            if(gpreg1 != $2)
            {
                x86_mov_reg_reg(inst, gpreg1, $3, 4);
                if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
            }
            else if($3 != X86_EAX)
            {
                if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                x86_mov_reg_reg(inst, gpreg1, $3, 4);
            }
            else
            {
                x86_xchg_reg_reg(inst, X86_EAX, gpreg1, 4);
            }
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, gpreg1, 0);
            
        }

        x86_mov_membase_reg(inst, X86_EBP, $1, X86_EDX, 4);
    }
    [=reg, imm, imm] -> {
        if($3 != 0) x86_mov_reg_imm(inst, $1, $2 % $3);
        else inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
    }
    [=reg, imm, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        x86_mov_reg_imm(inst, X86_EAX, $2);
        x86_clear_reg(inst, X86_EDX);
        x86_div_membase(inst, X86_EBP, $3, 0);
        if($1 != X86_EDX) x86_mov_reg_reg(inst, $1, X86_EDX, 4);
    }
    [=reg, imm, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $3, 0);
        }
        else if($1 != X86_EAX && $1 != X86_EDX)
        {
            x86_mov_reg_reg(inst, $1, $3, 4);
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $1, 0);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_imm(inst, X86_EAX, $2);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, gpreg1, 0);
            
        }

        if($1 != X86_EDX) x86_mov_reg_reg(inst, $1, X86_EDX, 4);
    }
    [=reg, local, imm] -> {
        x86_mov_reg_membase(inst, $1, X86_EBP, $2, 4);
        inst = masm_irem_un_reg_reg_imm(inst, $1, $1, $3);
    }
    [=reg, local, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($2 != $3)
        {
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_clear_reg(inst, X86_EDX);
            x86_div_membase(inst, X86_EBP, $3, 0);
            if($1 != X86_EDX) x86_mov_reg_reg(inst, $1, X86_EDX, 4);
        }
        else x86_mov_reg_imm(inst, $1, 0);
    }
    [=reg, local, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($3 != X86_EAX && $3 != X86_EDX)
        {
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $3, 0);
        }
        else if($1 != X86_EAX && $1 != X86_EDX)
        {
            x86_mov_reg_reg(inst, $1, $3, 4);
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, $1, 0);
        }
        else
        {
            find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
            x86_mov_reg_reg(inst, gpreg1, $3, 4);
            x86_mov_reg_membase(inst, X86_EAX, X86_EBP, $2, 4);
            x86_clear_reg(inst, X86_EDX);
            x86_div_reg(inst, gpreg1, 0);
            
        }

        if($1 != X86_EDX) x86_mov_reg_reg(inst, $1, X86_EDX, 4);
    }
    [=reg, reg, imm] -> {
        inst = masm_irem_un_reg_reg_imm(inst, $1, $2, $3);
    }
    [=reg, reg, local] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_membase_imm(inst, X86_CMP, X86_EBP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
        x86_clear_reg(inst, X86_EDX);
        x86_div_membase(inst, X86_EBP, $3, 0);
        if($1!=X86_EDX) x86_mov_reg_reg(inst, $1, X86_EDX, 4);
    }
    [=reg, reg, reg] -> {
        #ifndef JIT_USE_SIGNALS
        unsigned char *patch;
        x86_alu_reg_imm(inst, X86_CMP, $3, 0);
        patch = inst;
        x86_branch8(inst, X86_CC_NE, 0, 0);
        inst = jite_throw_builtin(inst, func, JIT_RESULT_DIVISION_BY_ZERO);
        x86_patch(patch, inst);
        #endif

        if($2 != $3)
        {
            if($3 != X86_EAX && $3 != X86_EDX)
            {
                if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                x86_clear_reg(inst, X86_EDX);
                x86_div_reg(inst, $3, 0);
            }
            else if($1 != X86_EAX && $1 != X86_EDX)
            {
                if($1 != $2)
                {
                    x86_mov_reg_reg(inst, $1, $3, 4);
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                }
                else if($3 != X86_EAX)
                {
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                    x86_mov_reg_reg(inst, $1, $3, 4);
                }
                else
                {
                    x86_xchg_reg_reg(inst, X86_EAX, $1, 4);
                }
                x86_clear_reg(inst, X86_EDX);
                x86_div_reg(inst, $1, 0);
            }
            else
            {
                find_one_gp_reg_cond2(inst, X86_EAX, X86_EDX);
                if(gpreg1 != $2)
                {
                    x86_mov_reg_reg(inst, gpreg1, $3, 4);
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                }
                else if($3 != X86_EAX)
                {
                    if($2 != X86_EAX) x86_mov_reg_reg(inst, X86_EAX, $2, 4);
                    x86_mov_reg_reg(inst, gpreg1, $3, 4);
                }
                else
                {
                    x86_xchg_reg_reg(inst, X86_EAX, gpreg1, 4);
                }
                x86_clear_reg(inst, X86_EDX);
                x86_div_reg(inst, gpreg1, 0);

                
            }

            if($1 != X86_EDX) x86_mov_reg_reg(inst, $1, X86_EDX, 4);
        }
        else x86_mov_reg_imm(inst, $1, 0);
    }

JIT_OP_INEG:
    [=local, imm] -> {
        x86_mov_membase_imm(inst, X86_EBP, $1, -$2, 4);
    }
    [=local, local] -> {
        if($1 != $2)
        {
            find_one_gp_reg(inst);
            x86_mov_reg_membase(inst, gpreg1, X86_EBP, $2, 4);
            x86_neg_reg(inst, gpreg1);
            x86_mov_membase_reg(inst, X86_EBP, $1, gpreg1, 4);
            
        }
        else
        {
            x86_neg_membase(inst, X86_EBP, $1);
        }
    }
    [=local, reg] -> {
        x86_mov_membase_reg(inst, X86_EBP, $1, $2, 4);
        x86_neg_membase(inst, X86_EBP, $1);
    }
    [=reg, imm] -> {
        x86_mov_reg_imm(inst, $1, -$2);
    }
    [=reg, local] -> {
        x86_mov_reg_membase(inst, $1, X86_EBP, $2, 4);
        x86_neg_reg(inst, $1);
    }
    [=reg, reg] -> {
        if($1 != $2)
        {
            x86_mov_reg_reg(inst, $1, $2, 4);
            x86_neg_reg(inst, $1);
        }
        else
        {
            x86_neg_reg(inst, $1);
        }
    }

JIT_OP_FADD, JIT_OP_DADD, JIT_OP_FMUL, JIT_OP_DMUL, JIT_OP_FMAX, JIT_OP_DMAX, JIT_OP_FMIN, JIT_OP_DMIN:
    [=local, imm, imm] -> {
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_imm(inst, xmmreg1, $2, sourceType);
        inst = masm_mov_membase_imm(inst, X86_ESP, -32, $3, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_ESP, -32);
        inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
        
    }
    [=local, imm, local] -> {
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_imm(inst, xmmreg1, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_EBP, $3);
        inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
        
    }
    [=local, imm, freg] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -32, $2, sourceType);
        if(!jite_xmm_reg_is_free(func, $3))
        {
            find_one_xmm_reg(inst);
            if($3 != xmmreg1) inst = masm_mov_reg_reg(inst, xmmreg1, $3, sourceType);
            emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_ESP, -32);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
            
        }
        else
        {
            emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $3, X86_ESP, -32);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $3, sourceType);
        }
    }
    [=local, local, imm] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -32, $3, sourceType);
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_membase(inst, xmmreg1, X86_EBP, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_ESP, -32);
        inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
        
    }
    [=local, local, local] -> {
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_membase(inst, xmmreg1, X86_EBP, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_EBP, $3);
        inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
        
    }
    [=local, local, freg] -> {
        if(!jite_xmm_reg_is_free(func, $3))
        {
            find_one_xmm_reg(inst);
            if($3 != xmmreg1) inst = masm_mov_reg_reg(inst, xmmreg1, $3, sourceType);
            emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_EBP, $2);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
            
        }
        else
        {
            emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $3, X86_EBP, $2);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $3, sourceType);
        }
    }
    [=local, freg, imm] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -32, $3, sourceType);
        if(!jite_xmm_reg_is_free(func, $2))
        {
            find_one_xmm_reg(inst);
            if($2 != xmmreg1) inst = masm_mov_reg_reg(inst, xmmreg1, $2, sourceType);
            emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_ESP, -32);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
            
        }
        else
        {
            emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $2, X86_ESP, -32);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $2, sourceType);
        }
    }
    [=local, freg, local] -> {
        if(!jite_xmm_reg_is_free(func, $2))
        {
            find_one_xmm_reg(inst);
            if($2 != xmmreg1) inst = masm_mov_reg_reg(inst, xmmreg1, $2, sourceType);
            emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_EBP, $3);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
            
        }
        else
        {
            emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $2, X86_EBP, $3);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $2, sourceType);
        }
    }
    [=local, freg, freg] -> {
        if(!jite_xmm_reg_is_free(func, $2) && !jite_xmm_reg_is_free(func, $3))
        {
            find_one_xmm_reg_cond1(inst, $3);
            inst = masm_mov_reg_reg(inst, xmmreg1, $2, sourceType);
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), xmmreg1, $3);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
            
        }
        else if(jite_xmm_reg_is_free(func, $2))
        {
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $2, $3);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $2, sourceType);
        }
        else
        {
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $3, $2);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $3, sourceType);
        }
    }
    [=freg, imm, imm] -> {
        inst = masm_mov_reg_imm(inst, $1, $2, sourceType);
        inst = masm_mov_membase_imm(inst, X86_ESP, -16, $3, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_ESP, -16);
    }
    [=freg, imm, local] -> {
        inst = masm_mov_reg_imm(inst, $1, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_EBP, $3);
    }
    [=freg, imm, freg] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -16, $2, sourceType);
        if($1 != $3) inst = masm_mov_reg_reg(inst, $1, $3, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_ESP, -16);
    }
    [=freg, local, imm] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -16, $3, sourceType);
        inst = masm_mov_reg_membase(inst, $1, X86_EBP, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_ESP, -16);
    }
    [=freg, local, local] -> {
        inst = masm_mov_reg_membase(inst, $1, X86_EBP, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_EBP, $3);
    }
    [=freg, local, freg] -> {
        if($1 != $3) inst = masm_mov_reg_reg(inst, $1, $3, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_EBP, $2);
    }
    [=freg, freg, imm] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -16, $3, sourceType);
        if($1 != $2) inst = masm_mov_reg_reg(inst, $1, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_ESP, -16);
    }
    [=freg, freg, local] -> {
        if($1 != $2) inst = masm_mov_reg_reg(inst, $1, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_EBP, $3);
    }
    [=freg, freg, freg] -> {
        if($1 != $3 && $1 != $2)
        {
            inst = masm_mov_reg_reg(inst, $1, $2, sourceType);
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $1, $3);
        }
        else if ($1 != $3)
        {
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $1, $3);
        }
        else
        {
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $1, $2);
        }
    }

JIT_OP_FSUB, JIT_OP_DSUB, JIT_OP_FDIV, JIT_OP_DDIV:
    [=local, imm, imm] -> {
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_imm(inst, xmmreg1, $2, sourceType);
        inst = masm_mov_membase_imm(inst, X86_ESP, -32, $3, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_ESP, -32);
        inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
        
    }
    [=local, imm, local] -> {
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_imm(inst, xmmreg1, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_EBP, $3);
        inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
        
    }
    [=local, imm, freg] -> {
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_imm(inst, xmmreg1, $2, sourceType);
        emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), xmmreg1, $3);
        inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
        
    }
    [=local, local, imm] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -32, $3, sourceType);
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_membase(inst, xmmreg1, X86_EBP, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_ESP, -32);
        inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
        
    }
    [=local, local, local] -> {
        find_one_xmm_reg(inst);
        inst = masm_mov_reg_membase(inst, xmmreg1, X86_EBP, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_EBP, $3);
        inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
        
    }
    [=local, local, freg] -> {
        find_one_xmm_reg_cond1(inst, $3);
        inst = masm_mov_reg_membase(inst, xmmreg1, X86_EBP, $2, sourceType);
        emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), xmmreg1, $3);
        inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);        
    }
    [=local, freg, imm] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -32, $3, sourceType);
        if(!jite_xmm_reg_is_free(func, $2))
        {
            find_one_xmm_reg(inst);
            inst = masm_mov_reg_reg(inst, xmmreg1, $2, sourceType);
            emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_ESP, -32);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
            
        }
        else
        {
            emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $2, X86_ESP, -32);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $2, sourceType);
        }
    }
    [=local, freg, local] -> {
        if(!jite_xmm_reg_is_free(func, $2))
        {
            find_one_xmm_reg(inst);
            inst = masm_mov_reg_reg(inst, xmmreg1, $2, sourceType);
            emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), xmmreg1, X86_EBP, $3);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
            
        }
        else
        {
            emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $2, X86_EBP, $3);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $2, sourceType);
        }
    }
    [=local, freg, freg] -> {
        if(!jite_xmm_reg_is_free(func, $2))
        {
            find_one_xmm_reg_cond1(inst, $3);
            inst = masm_mov_reg_reg(inst, xmmreg1, $2, sourceType);
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), xmmreg1, $3);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, xmmreg1, sourceType);
            
        }
        else
        {
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $2, $3);
            inst = masm_mov_membase_reg(inst, X86_EBP, $1, $2, sourceType);
        }
    }
    [=freg, imm, imm] -> {
        inst = masm_mov_reg_imm(inst, $1, $2, sourceType);
        inst = masm_mov_membase_imm(inst, X86_ESP, -16, $3, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_ESP, -16);
    }
    [=freg, imm, local] -> {
        inst = masm_mov_reg_imm(inst, $1, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_EBP, $3);
    }
    [=freg, imm, freg] -> {
        if($1 != $3)
        {
            inst = masm_mov_reg_imm(inst, $1, $2, sourceType);
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $1, $3);
        }
        else
        {
            find_one_xmm_reg_cond1(inst, $3);
            inst = masm_mov_reg_imm(inst, xmmreg1, $2, sourceType);
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), xmmreg1, $3);
            inst = masm_mov_reg_reg(inst, $1, xmmreg1, sourceType);
        }
    }
    [=freg, local, imm] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -16, $3, sourceType);
        inst = masm_mov_reg_membase(inst, $1, X86_EBP, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_ESP, -16);
    }
    [=freg, local, local] -> {
        inst = masm_mov_reg_membase(inst, $1, X86_EBP, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_EBP, $3);
    }
    [=freg, local, freg] -> {
        if($1 != $3)
        {
            inst = masm_mov_reg_membase(inst, $1, X86_EBP, $2, sourceType);
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $1, $3);
        }
        else
        {
            find_one_xmm_reg_cond1(inst, $3);
            inst = masm_mov_reg_membase(inst, xmmreg1, X86_EBP, $2, sourceType);
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), xmmreg1, $3);
            inst = masm_mov_reg_reg(inst, $1, xmmreg1, sourceType);
        }
    }
    [=freg, freg, imm] -> {
        inst = masm_mov_membase_imm(inst, X86_ESP, -16, $3, sourceType);
        if($1 != $2) inst = masm_mov_reg_reg(inst, $1, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_ESP, -16);
    }
    [=freg, freg, local] -> {
        if($1 != $2) inst = masm_mov_reg_reg(inst, $1, $2, sourceType);
        emit_sse_instruction_reg_membase((inst), (machine_code1), (machine_code2), $1, X86_EBP, $3);
    }
    [=freg, freg, freg] -> {
        if($1 != $2 && $1 != $3)
        {
            inst = masm_mov_reg_reg(inst, $1, $2, sourceType);
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $1, $3);
        }
        else if ($1 != $3)
        {
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $1, $3);
        }
        else if ($1 != $2)
        {
            if(jite_xmm_reg_is_free(func, $2))
            {
                emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $2, $3);
                inst = masm_mov_reg_reg(inst, $1, $2, sourceType);
            }
            else if(have_free_xmmregs())
            {
                find_one_xmm_reg_cond1(inst, $3);
                inst = masm_mov_reg_reg(inst, xmmreg1, $2, sourceType);
                emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), xmmreg1, $3);
                inst = masm_mov_reg_reg(inst, $1, xmmreg1, sourceType);
                
            }
            else
            {
                inst = masm_mov_membase_reg(inst, X86_ESP, -16, $2, sourceType);
                emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $2, $3);
                inst = masm_mov_reg_reg(inst, $1, $2, sourceType);
                inst = masm_mov_reg_membase(inst, $2, X86_ESP, -16, sourceType);
            }
        }
        else
        {
            emit_sse_instruction_reg_reg((inst), (machine_code1), (machine_code2), $1, $1);
        }
    }
